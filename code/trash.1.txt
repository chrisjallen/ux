<Frame
  key="LsKhx5Eg4"
  background="hsl(0, 0%, 100%)"
  height={317}
  id="Layout"
  overflow="hidden"
  visible
  width={243}
>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Radius"
    left={106}
    opacity={1}
    style={{}}
    top={269}
    visible
    width={45}
  >
    <UINumberInput
      height={17}
      id="NX4700fSU./UINumberInput.tsx_UINumberInput"
      label="."
      type="number"
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Rotation-slide"
    left={171}
    opacity={1}
    style={{}}
    top={242}
    visible
    width={45}
  >
    <UISliderInput
      height={17}
      id="CyD0NvO1V./UISliderInput.tsx_UISliderInput"
      rangeMax={200}
      rangeMin={0}
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Rotation"
    left={106}
    opacity={1}
    style={{}}
    top={239}
    visible
    width={45}
  >
    <UINumberInput
      height={17}
      id="SwNfPgAp6./UINumberInput.tsx_UINumberInput"
      label="."
      type="number"
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Opacity-slide"
    left={171}
    opacity={1}
    style={{}}
    top={213}
    visible
    width={45}
  >
    <UISliderInput
      height={17}
      id="jTjduN6OE./UISliderInput.tsx_UISliderInput"
      rangeMax={200}
      rangeMin={0}
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Opacity"
    left={106}
    opacity={1}
    style={{}}
    top={209}
    visible
    width={45}
  >
    <UINumberInput
      height={17}
      id="UVPNLz3lf./UINumberInput.tsx_UINumberInput"
      label="."
      type="number"
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Overflow"
    left={106}
    opacity={1}
    style={{}}
    top={178}
    visible
    width={100}
  >
    <UIBooleanInput
      falseText="hide"
      height={17}
      id="ehC2i8hnC./UIBooleanInput.tsx_UIBooleanInput"
      initialValue
      trueText="show"
      type="booleanInput"
      width={100}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Height-type"
    left={161}
    opacity={1}
    style={{}}
    top={147}
    visible
    width={60}
  >
    <UIDropDown
      height={17}
      id="g8tt7sgbP./UIDropDownInput.tsx_UIDropDown"
      label="Field"
      options={[]}
      type="dropdown"
      width={60}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Height"
    left={106}
    opacity={1}
    style={{}}
    top={147}
    visible
    width={45}
  >
    <UINumberInput
      height={17}
      id="sYLfxooSD./UINumberInput.tsx_UINumberInput"
      label="."
      type="number"
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Width-type"
    left={161}
    opacity={1}
    style={{}}
    top={118}
    visible
    width={60}
  >
    <UIDropDown
      height={17}
      id="jXTID8qnp./UIDropDownInput.tsx_UIDropDown"
      label="Field"
      options={[]}
      type="dropdown"
      width={60}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={17}
    id="Width"
    left={106}
    opacity={1}
    style={{}}
    top={118}
    visible
    width={45}
  >
    <UINumberInput
      height={17}
      id="QR_T_i9XJ./UINumberInput.tsx_UINumberInput"
      label="."
      type="number"
      width={45}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={60}
    id="BoxModel"
    left={171}
    opacity={1}
    style={{}}
    top={49}
    visible
    width={60}
  >
    <UIBoxModelInput
      height={60}
      id="EGmvveLLG./UIBoxModelInput.tsx_UIBoxModelInput"
      width={60}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={23}
    id="Right"
    left={128}
    opacity={1}
    style={{}}
    top={14}
    visible
    width={19}
  >
    <UINumberInput2
      height={23}
      id="sP2Umuj9W./UINumberInput.tsx_UINumberInput2"
      label="L"
      type="number"
      width={19}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={23}
    id="Bottom"
    left={164}
    opacity={1}
    style={{}}
    top={14}
    visible
    width={19}
  >
    <UINumberInput2
      height={23}
      id="db8QnhYV1./UINumberInput.tsx_UINumberInput2"
      label="L"
      type="number"
      width={19}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={23}
    id="Left"
    left={201}
    opacity={1}
    style={{}}
    top={14}
    visible
    width={19}
  >
    <UINumberInput2
      height={23}
      id="zgrBtd5xG./UINumberInput.tsx_UINumberInput2"
      label="L"
      type="number"
      width={19}
    />
  </ComponentContainer>
  <ComponentContainer
    componentIdentifier=""
    height={23}
    id="Top"
    left={91}
    opacity={1}
    style={{}}
    top={14}
    visible
    width={19}
  >
    <UINumberInput2
      height={23}
      id="Dxjy0vLP7./UINumberInput.tsx_UINumberInput2"
      label="L"
      type="number"
      width={19}
    />
  </ComponentContainer>
  <Text
    height={40}
    id="captions"
    left={14}
    rawHTML='<div data-offset-key="1q4ge-0-0" class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span data-offset-key="1q4ge-0-0" style="tab-size:4;font-family:"HiraKakuStdN-W8", "Hiragino Kaku Gothic StdN", serif;-webkit-text-fill-color:#BBBBBB;font-size:9px;letter-spacing:0px;line-height:1.2;font-weight:800"><span data-text="true">Use the box model to pin constraints.</span></span></div>'
    top={29}
    visible
    width={76}
  />
  <Text
    bottom={4}
    id="labels"
    left={14}
    top={14}
    visible
    width={76}
  />
</Frame>;

// const Input = ({
// rawHTML='<div class=&apos;DraftEditor-alignLeft&apos;><div data-offset-key="bgvs8-0-0" class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span data-offset-key="bgvs8-0-0" style="tab-size:4;font-family:"IBMPlexMono-Medium", "IBM Plex Mono Medium", monospace;-webkit-text-fill-color:#777777;font-size:10px;letter-spacing:0px;line-height:1.2;font-weight:400"><span data-text="true">100</span></span></div></div>'
//   className,
//   height,
//   id,
//   rawHTML,
//   width,
//   visible
// }) => {
//   return (
//     <input
//       className={className}
//       type="text"
//       height={height}
//       id={id}
//       width={width}
//       disabled={visible}
//       value="whammy"
//     />
//   );
// };

// const Text = styled(Input)``;

// interface Props {
//   label: string;
//   type: "default" | "primary" | "danger" | "ghost" | "dashed";
//   size: "default" | "small" | "large";
//   icon: string;
//   disabled: boolean;
//   ghost: boolean;
//   circle: boolean;
//   onClick: React.MouseEventHandler;
// }

// export class AntButton extends React.Component<Props> {
//   // Set default properties
//   static defaultProps = {
//     width: 68,
//     height: 32,
//     label: "Label",
//     type: "default",
//     size: "default",
//     icon: "",
//     disabled: false,
//     ghost: false,
//     circle: false,
//     onClick: () => {}
//   };

//   // Items shown in property panel
//   static propertyControls: PropertyControls = {
//     label: { type: ControlType.String, title: "Label" },
//     icon: { type: ControlType.String, title: "Icon" },
//     type: {
//       type: ControlType.Enum,
//       options: ["default", "primary", "danger", "ghost", "dashed"],
//       title: "Type"
//     },
//     size: {
//       type: ControlType.SegmentedEnum,
//       options: ["default", "small", "large"],
//       title: "Size"
//     },
//     circle: { type: ControlType.Boolean, title: "Circle" },
//     disabled: { type: ControlType.Boolean, title: "Disabled" },
//     ghost: { type: ControlType.Boolean, title: "Ghost" }
//   };

//   render() {
//     const { label, type, size, icon, disabled, ghost, circle, onClick } = {
//       ...this.props
//     };
//     const labeledButton = (
//       <Button
//         type={type}
//         size={size}
//         icon={icon}
//         disabled={disabled}
//         ghost={ghost}
//         onClick={onClick}
//         block={true}
//       >
//         {label}
//       </Button>
//     );
//     const circledButton = (
//       <Button
//         type={type}
//         size={size}
//         icon={icon}
//         disabled={disabled}
//         ghost={ghost}
//         onClick={onClick}
//         shape="circle"
//       />
//     );

//     return circle ? circledButton : labeledButton;
//   }
// }
